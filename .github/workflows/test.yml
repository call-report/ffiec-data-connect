name: Test

on:
  push:
    branches: [ main, develop, feature/*, release/* ]
  pull_request:
    branches: [ main, develop, release/* ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,polars]"
        
    - name: Run quality checks
      run: |
        make check-all
        
    - name: Validate version consistency (Python 3.11 only)
      if: matrix.python-version == '3.11'
      run: |
        echo "üîç Validating version consistency between pyproject.toml and dist/ artifacts..."
        
        # Extract version from pyproject.toml
        EXPECTED_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Expected version: $EXPECTED_VERSION"
        
        # Check if dist/ folder has correct artifacts (if it exists)
        if [ -d "dist" ] && [ "$(ls -A dist/ 2>/dev/null)" ]; then
          echo "Found dist/ artifacts, validating versions..."
          
          # Validate wheel filename matches version
          for wheel in dist/*.whl; do
            [ -f "$wheel" ] || continue
            if [[ ! "$wheel" =~ -$EXPECTED_VERSION- ]]; then
              echo "‚ùå Wheel file $wheel does not contain expected version $EXPECTED_VERSION"
              exit 1
            fi
          done
          
          # Validate sdist filename matches version  
          for sdist in dist/*.tar.gz; do
            [ -f "$sdist" ] || continue
            if [[ ! "$sdist" =~ -$EXPECTED_VERSION\.tar\.gz ]]; then
              echo "‚ùå Source distribution $sdist does not contain expected version $EXPECTED_VERSION"
              exit 1
            fi
          done
          
          # Validate wheel dependencies if validation script exists
          if [ -f "dev/scripts/validate_wheel_dependencies.py" ]; then
            for wheel in dist/*.whl; do
              [ -f "$wheel" ] || continue
              echo "üîç Validating wheel dependencies..."
              python dev/scripts/validate_wheel_dependencies.py "$wheel"
              break  # Only need to check one wheel
            done
          fi
          
          echo "‚úÖ All version checks passed!"
        else
          echo "‚ÑπÔ∏è  No dist/ artifacts found, skipping version validation"
        fi
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false