name: Test

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop, feature/*, release/* ]
  pull_request:
    branches: [ main, develop, release/* ]

jobs:
  lint:
    name: Lint & Type Check (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install lint deps
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy types-requests
          # Install package (non-editable) to allow mypy to resolve
          pip install .

      - name: Black (check)
        run: black --check src/ tests/

      - name: Isort (check)
        run: isort --check-only src/ tests/

      - name: Flake8
        run: flake8 src/ tests/

      - name: MyPy
        run: mypy --package ffiec_data_connect

  build:
    name: Build & Validate (Python 3.11)
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build deps
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: '1'
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distributions
        run: |
          echo "üì¶ Building sdist and wheel artifacts..."
          python -m build --sdist --wheel
          ls -1 dist

      - name: Validate dist artifact versions & metadata
        run: |
          set -euo pipefail
          echo "üîç Validating version consistency (build job)..."
          EXPECTED_VERSION=$(grep -E '^version = ' pyproject.toml | sed -E 's/version = "([^"]+)"/\1/')
          echo "Expected version: ${EXPECTED_VERSION}"
          test -n "${EXPECTED_VERSION}" || { echo 'Failed to extract version'; exit 1; }
          test -d dist || { echo 'dist/ missing'; exit 1; }
          shopt -s nullglob
          wheels=(dist/*.whl)
          sdists=(dist/*.tar.gz)
          if [ ${#wheels[@]} -eq 0 ] || [ ${#sdists[@]} -eq 0 ]; then
            echo '‚ùå Expected both wheel and sdist'; exit 1; fi
          for f in "${wheels[@]}"; do [[ "$f" == *"-${EXPECTED_VERSION}-"* ]] || { echo "Bad wheel name $f"; exit 1; }; done
          for f in "${sdists[@]}"; do [[ "$f" == *"-${EXPECTED_VERSION}.tar.gz" ]] || { echo "Bad sdist name $f"; exit 1; }; done
          echo "‚úÖ Filenames contain expected version"
          python -m pip install twine
          python -m twine check dist/*
          echo "‚úÖ Metadata (twine check) passed"
          if [ -f dev/scripts/validate_wheel_dependencies.py ]; then
            echo "üîç Validating wheel dependencies..."
            python dev/scripts/validate_wheel_dependencies.py "${wheels[0]}"
          fi
          echo "üéâ Build job validation complete"

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/*
          if-no-files-found: error

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: false
    env:
      PYTHONHASHSEED: '0'
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install project wheel + test deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          echo "üîç Listing dist/ contents:" && ls -1 dist || true
          # Install package from local dist with extras (extras can't be appended to a wheel path directly)
          # Use find-links so pip resolves the project name with extras from the local wheel
          pip install --no-index --find-links dist 'ffiec-data-connect[polars]'
          # Install test/dev tooling (without reinstalling project) from pinned list if available
          if [ -f dev/requirements-test.txt ]; then
            # Filter out black/isort/flake8/mypy if already installed to speed up (optional)
            grep -v -E '^(black|isort|flake8|mypy)(==|>=)?' dev/requirements-test.txt > /tmp/test-reqs.txt || true
            pip install -r /tmp/test-reqs.txt
          else
            pip install pytest pytest-cov
          fi
          python -c "import ffiec_data_connect, sys; import importlib; v=getattr(ffiec_data_connect,'__version__','?'); print('Imported ffiec_data_connect version', v); sys.exit(0 if v else 1)"

      - name: Lightweight dist version re-validation
        run: |
          set -euo pipefail
          EXPECTED_VERSION=$(grep -E '^version = ' pyproject.toml | sed -E 's/version = "([^"]+)"/\1/')
          echo "Expected version: ${EXPECTED_VERSION} (Python ${{ matrix.python-version }})"
          shopt -s nullglob
          wheels=(dist/*.whl); sdists=(dist/*.tar.gz)
          if [ ${#wheels[@]} -eq 0 ] || [ ${#sdists[@]} -eq 0 ]; then echo '‚ùå Missing wheel or sdist'; exit 1; fi
          for f in "${wheels[@]}"; do [[ "$f" == *"-${EXPECTED_VERSION}-"* ]] || { echo "Bad wheel $f"; exit 1; }; done
          for f in "${sdists[@]}"; do [[ "$f" == *"-${EXPECTED_VERSION}.tar.gz" ]] || { echo "Bad sdist $f"; exit 1; }; done
          echo '‚úÖ Artifact filenames match expected version'

      - name: Run tests
        run: |
          pytest -v --cov=ffiec_data_connect --cov-report=term-missing --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false