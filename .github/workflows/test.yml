name: Test & Quality Assurance

on:
  push:
    branches: [ main, develop, feature/*, release/* ]
  pull_request:
    branches: [ main, develop, release/* ]

# Cancel in-progress runs for the same branch
concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Skip expensive tests for documentation-only changes
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code-changed: ${{ steps.changes.outputs.code }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Check for code changes
      id: changes
      run: |
        if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '\.(py|toml|yml|yaml|cfg|ini)$' > /dev/null; then
          echo "code=true" >> $GITHUB_OUTPUT
          echo "docs-only=false" >> $GITHUB_OUTPUT
        elif git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '\.(md|rst|txt)$' > /dev/null; then
          echo "code=false" >> $GITHUB_OUTPUT
          echo "docs-only=true" >> $GITHUB_OUTPUT
        else
          echo "code=true" >> $GITHUB_OUTPUT
          echo "docs-only=false" >> $GITHUB_OUTPUT
        fi

  build-and-validate:
    name: Build & Validate Package
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs-only != 'true'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5.1.0
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install build dependencies
      run: |
        echo "::group::Installing build tools"
        python -m pip install --upgrade pip
        pip install build twine bandit pip-audit
        echo "::endgroup::"
        
    - name: Security scan with bandit
      run: |
        echo "::group::Running security scan"
        bandit -r src/ffiec_data_connect/ -f json -o bandit-report.json -ll || echo "Bandit found issues, check report"
        bandit -r src/ffiec_data_connect/ -ll --skip B101  # Skip assert_used_test
        echo "::endgroup::"
        
    - name: Check dependencies for vulnerabilities
      run: |
        echo "::group::Checking for vulnerable dependencies"
        pip-audit --format=json --output=vulnerability-report.json . || echo "Vulnerabilities found, check report"
        pip-audit .
        echo "::endgroup::"
        
    - name: Build package
      run: |
        echo "::group::Building distributions"
        python -m build
        echo "Built files:"
        ls -la dist/
        
        # Monitor wheel size
        WHEEL_SIZE=$(du -m dist/*.whl | cut -f1)
        echo "Wheel size: ${WHEEL_SIZE}MB"
        if [ "$WHEEL_SIZE" -gt 5 ]; then
          echo "⚠️ Warning: Wheel size is ${WHEEL_SIZE}MB (> 5MB threshold)"
        fi
        echo "::endgroup::"
        
    - name: Verify package metadata
      run: |
        echo "::group::Validating package metadata"
        twine check dist/*
        echo "::endgroup::"
        
    - name: Validate version consistency & dependencies
      run: |
        echo "::group::Version and dependency validation"
        
        # Extract version from pyproject.toml
        EXPECTED_VERSION=$(grep -E '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Expected version: $EXPECTED_VERSION"
        
        # Validate wheel filename matches version
        for wheel in dist/*.whl; do
          [ -f "$wheel" ] || continue
          if [[ ! "$wheel" =~ -$EXPECTED_VERSION- ]]; then
            echo "❌ Wheel file $wheel does not contain expected version $EXPECTED_VERSION"
            exit 1
          fi
        done
        
        # Validate sdist filename matches version  
        for sdist in dist/*.tar.gz; do
          [ -f "$sdist" ] || continue
          if [[ ! "$sdist" =~ -$EXPECTED_VERSION\.tar\.gz ]]; then
            echo "❌ Source distribution $sdist does not contain expected version $EXPECTED_VERSION"
            exit 1
          fi
        done
        
        # Basic wheel dependency validation
        echo "🔍 Validating wheel contains expected dependencies..."
        for wheel in dist/*.whl; do
          [ -f "$wheel" ] || continue
          unzip -l "$wheel" | grep -E "(numpy|pandas|requests)" && echo "✅ Core dependencies found in wheel" || echo "⚠️ Core dependencies check inconclusive"
          break
        done
        
        echo "✅ All validation checks passed!"
        echo "::endgroup::"
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4.3.3
      with:
        name: security-reports
        path: |
          bandit-report.json
          vulnerability-report.json
        retention-days: 7
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4.3.3
      with:
        name: dist-artifacts
        path: dist/*
        retention-days: 7

  test-core:
    name: Test Core (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: build-and-validate
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4.1.7
      with:
        name: dist-artifacts
        path: dist
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5.1.0
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install from wheel with test dependencies
      run: |
        echo "::group::Installing package and dependencies"
        python -m pip install --upgrade pip
        
        # Install the built wheel
        pip install dist/*.whl
        
        # Install test dependencies
        pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-timeout pytest-xdist
        pip install black isort flake8 mypy types-requests
        
        # Install dependencies needed by test suite
        pip install psutil  # Required by memory leak tests
        
        # Install optional dependencies for comprehensive testing
        pip install polars pyarrow
        echo "::endgroup::"
        
    - name: Smoke test - basic import and version check
      run: |
        echo "::group::Smoke test"
        python -c "
        import sys
        import ffiec_data_connect as fdc
        
        print(f'Python version: {sys.version}')
        print(f'Package version: {fdc.__version__}')
        print('Available classes:', [name for name in dir(fdc) if not name.startswith('_')])
        
        # Test basic imports
        from ffiec_data_connect import WebserviceCredentials, FFIECConnection
        from ffiec_data_connect import AsyncCompatibleClient, RateLimiter
        
        print('✅ Smoke test passed - all core imports successful')
        "
        echo "::endgroup::"
        
    - name: Run quality checks
      run: |
        echo "::group::Code quality checks"
        make check-all
        echo "::endgroup::"
        
    - name: Run core tests with timing
      run: |
        echo "::group::Running test suite"
        # Run tests without coverage for wheel-based installation
        # Coverage is difficult with installed packages vs source
        pytest -v -x --tb=short \
          --durations=10 \
          --timeout=300 \
          -n auto \
          tests/unit/
        echo "::endgroup::"
        
    # Note: Coverage is handled in extended tests with source installation

  test-extended:
    name: Extended Tests (Python 3.11)
    runs-on: ubuntu-latest
    needs: [build-and-validate, test-core]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4.1.7
      with:
        name: dist-artifacts
        path: dist
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v5.1.0
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install with all dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl
        pip install pytest pytest-asyncio pytest-mock pytest-timeout
        pip install psutil  # For memory testing
        pip install polars pyarrow
        
    - name: Run memory leak tests
      run: |
        echo "::group::Memory leak detection"
        pytest -v tests/unit/test_memory_leaks.py --tb=short --durations=10
        echo "::endgroup::"
        
    - name: Run thread safety tests
      run: |
        echo "::group::Thread safety validation"
        pytest -v tests/unit/test_thread_safety.py --tb=short --durations=10
        echo "::endgroup::"
        
    # - name: Run integration tests
    #   run: |
    #     echo "::group::Integration tests"
    #     pytest -v tests/integration/ --tb=short --durations=10
    #     echo "::endgroup::"

  # Summary job to check overall status
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [changes, build-and-validate, test-core, test-extended]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.changes.result }}" == "success" && "${{ needs.changes.outputs.docs-only }}" == "true" ]]; then
          echo "📚 **Documentation-only changes detected** - skipped code tests" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
        
        echo "### Build & Validation" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.build-and-validate.result }}" == "success" ]]; then
          echo "✅ **Build & Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build & Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Core Tests" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.test-core.result }}" == "success" ]]; then
          echo "✅ **Core Tests**: PASSED (Python 3.10-3.13)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Core Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### Extended Tests" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.test-extended.result }}" == "success" ]]; then
          echo "✅ **Extended Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.test-extended.result }}" == "skipped" ]]; then
          echo "⏭️ **Extended Tests**: SKIPPED (not main branch)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Extended Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Fail if any required job failed
        if [[ "${{ needs.build-and-validate.result }}" != "success" || "${{ needs.test-core.result }}" != "success" ]]; then
          echo "❌ **Overall Status**: FAILED" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ **Overall Status**: PASSED" >> $GITHUB_STEP_SUMMARY
        fi
